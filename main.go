package main

import (
	"github.com/gofiber/fiber/v2/middleware/cors"
	"scylla/entity"
	"scylla/handler"
	"scylla/pkg/config"
	"scylla/pkg/exception"
	"scylla/pkg/utils"
	"scylla/repository"
	"scylla/routes"
	"scylla/service"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/fiber/v2/middleware/requestid"
	"github.com/swaggo/fiber-swagger"
	docs "scylla/docs" // docs is generated by Swag CLI, you have to import it.
)

//	@title			Short URL API
//	@version		1.0
//	@description	A simple URL shortener API built with Go and Fiber framework

func main() {
	loadConfig, err := config.LoadConfig(".")
	if err != nil {
		panic(exception.NewInternalServerErrorHandler(err.Error()))
	}

	////Database
	db := config.ConnectionDB(&loadConfig)
	//
	////Validate
	validate := utils.InitializeValidator(db)

	// environment swagger
	if loadConfig.Environment != "dev" {
		docs.SwaggerInfo.Host = loadConfig.SwaggerHost
		docs.SwaggerInfo.BasePath = loadConfig.SwaggerUrl
	} else {
		docs.SwaggerInfo.Host = "localhost:3000"
		docs.SwaggerInfo.BasePath = "/api/v1"
	}
	// init repository
	urlRepo := repository.NewUrlRepoImpl(db)
	//// init service
	shortenService := service.NewShortenServiceImpl(urlRepo, validate)
	// init handler
	shortenHandler := handler.NewShortenHandler(shortenService)

	//routes v1
	routesV1 := routes.NewRoutesV1(
		shortenHandler,
	)

	app := fiber.New(fiber.Config{
		ErrorHandler: exception.ExceptionHandlers,
	})
	app.Use(recover.New())
	app.Use(requestid.New())
	app.Use(cors.New())
	app.Use(logger.New(logger.Config{
		Format: "[${locals:requestid}] ${ip} - ${method} ${status} ${path} - ${latency}\n",
	}))
	app.Mount("/api/v1", routesV1)
	app.Get("/docs/*", fiberSwagger.WrapHandler)
	//endpoint not found
	app.Use(func(ctx *fiber.Ctx) error {
		return ctx.Status(fiber.StatusNotFound).JSON(entity.Error{
			Code:    fiber.StatusNotFound,
			Status:  "NOT FOUND",
			Errors:  "Page Not Found",
			TraceID: ctx.Locals("requestid").(string),
		})
	})
	//start
	err = app.Listen(":" + loadConfig.ServerPort)
	if err != nil {
		panic(err)
	}
}
